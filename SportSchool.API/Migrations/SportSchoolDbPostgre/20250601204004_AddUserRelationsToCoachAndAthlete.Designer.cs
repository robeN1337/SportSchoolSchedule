// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SportSchool.API.Data;

#nullable disable

namespace SportSchool.API.Migrations.SportSchoolDbPostgre
{
    [DbContext(typeof(SportSchoolDbPostgreContext))]
    [Migration("20250601204004_AddUserRelationsToCoachAndAthlete")]
    partial class AddUserRelationsToCoachAndAthlete
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SportSchool.API.Entities.Athlete", b =>
                {
                    b.Property<int>("Athleteid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("athleteid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Athleteid"));

                    b.Property<DateOnly>("Birthdate")
                        .HasColumnType("date")
                        .HasColumnName("birthdate");

                    b.Property<string>("Contact")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("contact");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("fullname");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("gender");

                    b.Property<int?>("Groupid")
                        .HasColumnType("integer")
                        .HasColumnName("groupid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Athleteid")
                        .HasName("athletes_pkey");

                    b.HasIndex("Groupid");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("athletes", (string)null);
                });

            modelBuilder.Entity("SportSchool.API.Entities.ClassSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClassName")
                        .HasColumnType("text");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone");

                    b.Property<int>("Groupid")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Groupid");

                    b.ToTable("ClassSessions");
                });

            modelBuilder.Entity("SportSchool.API.Entities.Coach", b =>
                {
                    b.Property<int>("Coachid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("coachid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Coachid"));

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("fullname");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Coachid")
                        .HasName("coaches_pkey");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("coaches", (string)null);
                });

            modelBuilder.Entity("SportSchool.API.Entities.Group", b =>
                {
                    b.Property<int>("Groupid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("groupid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Groupid"));

                    b.Property<int?>("Coachid")
                        .HasColumnType("integer")
                        .HasColumnName("coachid");

                    b.Property<string>("Groupname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("groupname");

                    b.Property<string>("Level")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("level");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.HasKey("Groupid")
                        .HasName("groups_pkey");

                    b.HasIndex("Coachid");

                    b.ToTable("groups", (string)null);
                });

            modelBuilder.Entity("SportSchool.API.Entities.User", b =>
                {
                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("user_guid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("UserGuid")
                        .HasName("users_pkey");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("SportSchool.API.Entities.Athlete", b =>
                {
                    b.HasOne("SportSchool.API.Entities.Group", "Group")
                        .WithMany("Athletes")
                        .HasForeignKey("Groupid")
                        .HasConstraintName("athletes_groupid_fkey");

                    b.HasOne("SportSchool.API.Entities.User", "User")
                        .WithOne("Athlete")
                        .HasForeignKey("SportSchool.API.Entities.Athlete", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportSchool.API.Entities.ClassSession", b =>
                {
                    b.HasOne("SportSchool.API.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("Groupid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("SportSchool.API.Entities.Coach", b =>
                {
                    b.HasOne("SportSchool.API.Entities.User", "User")
                        .WithOne("Coach")
                        .HasForeignKey("SportSchool.API.Entities.Coach", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportSchool.API.Entities.Group", b =>
                {
                    b.HasOne("SportSchool.API.Entities.Coach", "Coach")
                        .WithMany("Groups")
                        .HasForeignKey("Coachid")
                        .HasConstraintName("groups_coachid_fkey");

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("SportSchool.API.Entities.Coach", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("SportSchool.API.Entities.Group", b =>
                {
                    b.Navigation("Athletes");
                });

            modelBuilder.Entity("SportSchool.API.Entities.User", b =>
                {
                    b.Navigation("Athlete");

                    b.Navigation("Coach");
                });
#pragma warning restore 612, 618
        }
    }
}
